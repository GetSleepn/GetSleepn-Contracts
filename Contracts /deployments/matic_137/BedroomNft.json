{"metadata":"{\"compiler\":{\"version\":\"0.8.13\"},\"sources\":{\"contracts/BedroomNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nimport \\\"./Interfaces/IUpgradeNft.sol\\\";\\nimport \\\"./Utils/VRFConsumerBaseV2Upgradable.sol\\\";\\n\\n/// @title Bedroom NFT Contract\\n/// @author Alexis Balayre\\n/// @notice Bedroom NFT is the main NFT of GetSleepn app\\ncontract BedroomNft is\\n    Initializable,\\n    VRFConsumerBaseV2Upgradable,\\n    ERC1155Upgradeable,\\n    OwnableUpgradeable,\\n    ERC1155URIStorageUpgradeable\\n{\\n    /// @dev Dex Contract address\\n    address private dexAddress;\\n\\n    /// @dev Upgrade NFT Contract address\\n    IUpgradeNft private upgradeNftInstance;\\n\\n    /// @dev Chainlink VRF Variables\\n    VRFCoordinatorV2Interface private COORDINATOR;\\n    LinkTokenInterface private LINKTOKEN;\\n    uint32 private numWords;\\n    uint32 private callbackGasLimit;\\n    uint16 private requestConfirmations;\\n    uint64 private subscriptionId;\\n    bytes32 private keyHash;\\n\\n    /// @notice Scores of a Bedroom NFT\\n    struct NftSpecifications {\\n        uint256 lightIsolationScore; // Index 0\\n        uint256 bedroomThermalIsolationScore; // Index 1\\n        uint256 soundIsolationScore; // Index 2\\n        uint256 temperatureScore; // Index 3\\n        uint256 humidityScore; // Index 4\\n        uint256 sleepAidMachinesScore; // Index 5\\n        uint256 circadianRhythmRegulation; // Index 6\\n        uint256 sizeScore; // Index 7\\n        uint256 heightScore; // Index 8\\n        uint256 bedBaseScore; // Index 9\\n        uint256 mattressTechnologyScore; // Index 10\\n        uint256 mattressThicknessScore; // Index 11\\n        uint256 mattressDeformationScore; // Index 12\\n        uint256 thermalIsolationScore; // Index 13\\n        uint256 hygrometricRegulationScore; // Index 14\\n        uint256 comforterComfortabilityScore; // Index 15\\n        uint256 pillowComfortabilityScore; // Index 16\\n    }\\n\\n    /// @notice Enumeration of the different categories of a Bedroom NFT\\n    enum Category {\\n        Studio,\\n        Deluxe,\\n        Luxury\\n    }\\n\\n    /// @notice Administration informations of a Bedroom NFT\\n    struct NftOwnership {\\n        address owner;\\n        uint256 price;\\n        uint256 designId;\\n        uint256 level;\\n        Category category;\\n    }\\n\\n    /// @dev File format of NFT design files\\n    string private fileFormat;\\n\\n    /// @dev Number of NFT\\n    uint256 private tokenId;\\n\\n    /// @dev Maps Chainlink VRF Random Number Request Id to NFT Id\\n    mapping(uint256 => uint256) private requestIdToTokenId;\\n\\n    /// @dev Maps NFT Scores to NFT Id\\n    mapping(uint256 => NftSpecifications) private tokenIdToNftSpecifications;\\n\\n    /// @dev Maps NFT Informations to NFT Id\\n    mapping(uint256 => NftOwnership) private tokenIdToNftOwnership;\\n\\n    /// @notice Emits an event when a Bedroom NFT is minted\\n    event BedroomNftMinting(\\n        uint256 tokenId,\\n        string tokenURI,\\n        NftSpecifications specifications\\n    );\\n\\n    /// @notice Emits an event when a Bedroom NFT is upgraded\\n    event BedroomNftUpgrading(\\n        uint256 tokenId,\\n        string newTokenURI,\\n        NftSpecifications specifications\\n    );\\n    event ReturnedRandomness(uint256[] randomWords);\\n\\n    /// @dev Init function\\n    function initialize(\\n        uint64 _subscriptionId,\\n        address _vrfCoordinator,\\n        address _link_token_contract,\\n        bytes32 _keyHash\\n    ) public initializer {\\n        __ERC1155_init(\\\"\\\");\\n        __Ownable_init();\\n        __VrfCoordinator_init(_vrfCoordinator);\\n\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        LINKTOKEN = LinkTokenInterface(_link_token_contract);\\n        subscriptionId = _subscriptionId;\\n        keyHash = _keyHash;\\n        callbackGasLimit = 450000;\\n        requestConfirmations = 6;\\n        numWords = 17;\\n        tokenId = 0;\\n    }\\n\\n    /// @notice Inits contracts addresses\\n    /// @param _dexAddress Address of the Dex contract\\n    /// @param _upgradeNftAddress Address of the Upgrade NFT contract\\n    /// @dev This function can only be called by the owner of the contract\\n    function initContracts(address _dexAddress, IUpgradeNft _upgradeNftAddress)\\n        external\\n        onlyOwner\\n    {\\n        dexAddress = _dexAddress;\\n        upgradeNftInstance = _upgradeNftAddress;\\n    }\\n\\n    function getNftOwnership(uint256 _tokenId)\\n        external\\n        view\\n        returns (NftOwnership memory)\\n    {\\n        return tokenIdToNftOwnership[_tokenId];\\n    }\\n\\n    /// @notice Returns the score of a NFT attribute\\n    /// @param _tokenId The id of the NFT\\n    /// @param _indexAttribute The index of the desired attribute\\n    /// @return _score Score of the desired attribute\\n    function getNftSpecifications(uint256 _tokenId, uint256 _indexAttribute)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (_indexAttribute == 0) {\\n            return tokenIdToNftSpecifications[_tokenId].lightIsolationScore;\\n        }\\n        if (_indexAttribute == 1) {\\n            return\\n                tokenIdToNftSpecifications[_tokenId]\\n                    .bedroomThermalIsolationScore;\\n        }\\n        if (_indexAttribute == 2) {\\n            return tokenIdToNftSpecifications[_tokenId].soundIsolationScore;\\n        }\\n        if (_indexAttribute == 3) {\\n            return tokenIdToNftSpecifications[_tokenId].temperatureScore;\\n        }\\n        if (_indexAttribute == 4) {\\n            return tokenIdToNftSpecifications[_tokenId].humidityScore;\\n        }\\n        if (_indexAttribute == 5) {\\n            return tokenIdToNftSpecifications[_tokenId].sleepAidMachinesScore;\\n        }\\n        if (_indexAttribute == 6) {\\n            return\\n                tokenIdToNftSpecifications[_tokenId].circadianRhythmRegulation;\\n        }\\n        if (_indexAttribute == 7) {\\n            return tokenIdToNftSpecifications[_tokenId].sizeScore;\\n        }\\n        if (_indexAttribute == 8) {\\n            return tokenIdToNftSpecifications[_tokenId].heightScore;\\n        }\\n        if (_indexAttribute == 9) {\\n            return tokenIdToNftSpecifications[_tokenId].bedBaseScore;\\n        }\\n        if (_indexAttribute == 10) {\\n            return tokenIdToNftSpecifications[_tokenId].mattressTechnologyScore;\\n        }\\n        if (_indexAttribute == 11) {\\n            return tokenIdToNftSpecifications[_tokenId].mattressThicknessScore;\\n        }\\n        if (_indexAttribute == 12) {\\n            return\\n                tokenIdToNftSpecifications[_tokenId].mattressDeformationScore;\\n        }\\n        if (_indexAttribute == 13) {\\n            return tokenIdToNftSpecifications[_tokenId].thermalIsolationScore;\\n        }\\n        if (_indexAttribute == 14) {\\n            return\\n                tokenIdToNftSpecifications[_tokenId].hygrometricRegulationScore;\\n        }\\n        if (_indexAttribute == 15) {\\n            return\\n                tokenIdToNftSpecifications[_tokenId]\\n                    .comforterComfortabilityScore;\\n        }\\n        if (_indexAttribute == 16) {\\n            return\\n                tokenIdToNftSpecifications[_tokenId].pillowComfortabilityScore;\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice Updates chainlink variables\\n    /// @param _callbackGasLimit Callback Gas Limit\\n    /// @param _subscriptionId Chainlink subscription Id\\n    /// @param _keyHash Chainlink Key Hash\\n    /// @dev This function can only be called by the owner of the contract\\n    function updateChainlink(\\n        uint32 _callbackGasLimit,\\n        uint64 _subscriptionId,\\n        bytes32 _keyHash,\\n        uint16 _requestConfirmations\\n\\n    ) external onlyOwner {\\n        subscriptionId = _subscriptionId;\\n        keyHash = _keyHash;\\n        callbackGasLimit = _callbackGasLimit;\\n        requestConfirmations = _requestConfirmations;\\n    }\\n\\n    /// @notice Settles File format\\n    /// @param _format New file format\\n    /// @dev This function can only be called by the owner of the contract\\n    function setFileFormat(string memory _format) external onlyOwner {\\n        fileFormat = _format;\\n    }\\n\\n    /// @dev Generates random scores\\n    /// @param _randomWords List of random numbers\\n    /// @param _tokenId Id of the NFT\\n    function createBedroom(uint256[] memory _randomWords, uint256 _tokenId)\\n        internal\\n    {\\n        tokenIdToNftSpecifications[_tokenId] = NftSpecifications(\\n            (_randomWords[0] % 100) + 1,\\n            (_randomWords[1] % 100) + 1,\\n            (_randomWords[2] % 100) + 1,\\n            (_randomWords[3] % 100) + 1,\\n            (_randomWords[4] % 100) + 1,\\n            (_randomWords[5] % 100) + 1,\\n            (_randomWords[6] % 100) + 1,\\n            (_randomWords[7] % 100) + 1,\\n            (_randomWords[8] % 100) + 1,\\n            (_randomWords[9] % 100) + 1,\\n            (_randomWords[10] % 100) + 1,\\n            (_randomWords[11] % 100) + 1,\\n            (_randomWords[12] % 100) + 1,\\n            (_randomWords[13] % 100) + 1,\\n            (_randomWords[14] % 100) + 1,\\n            (_randomWords[15] % 100) + 1,\\n            (_randomWords[16] % 100) + 1\\n        );\\n    }\\n\\n    /// @dev Updates the scores of a NFT\\n    /// @param _tokenId Id of the NFT\\n    /// @param _indexAttribute Index of the attribute\\n    /// @param _valueToAdd Value to add to the score\\n    function updateBedroom(\\n        uint256 _tokenId,\\n        uint256 _indexAttribute,\\n        uint256 _valueToAdd\\n    ) internal {\\n        if (_indexAttribute == 0) {\\n            tokenIdToNftSpecifications[_tokenId].lightIsolationScore =\\n                tokenIdToNftSpecifications[_tokenId].lightIsolationScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 1) {\\n            tokenIdToNftSpecifications[_tokenId].bedroomThermalIsolationScore =\\n                tokenIdToNftSpecifications[_tokenId]\\n                    .bedroomThermalIsolationScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 2) {\\n            tokenIdToNftSpecifications[_tokenId].soundIsolationScore =\\n                tokenIdToNftSpecifications[_tokenId].soundIsolationScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 3) {\\n            tokenIdToNftSpecifications[_tokenId].temperatureScore =\\n                tokenIdToNftSpecifications[_tokenId].temperatureScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 4) {\\n            tokenIdToNftSpecifications[_tokenId].humidityScore =\\n                tokenIdToNftSpecifications[_tokenId].humidityScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 5) {\\n            tokenIdToNftSpecifications[_tokenId].sleepAidMachinesScore =\\n                tokenIdToNftSpecifications[_tokenId].sleepAidMachinesScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 6) {\\n            tokenIdToNftSpecifications[_tokenId].circadianRhythmRegulation =\\n                tokenIdToNftSpecifications[_tokenId].circadianRhythmRegulation +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 7) {\\n            tokenIdToNftSpecifications[_tokenId].sizeScore =\\n                tokenIdToNftSpecifications[_tokenId].sizeScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 8) {\\n            tokenIdToNftSpecifications[_tokenId].heightScore =\\n                tokenIdToNftSpecifications[_tokenId].heightScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 9) {\\n            tokenIdToNftSpecifications[_tokenId].bedBaseScore =\\n                tokenIdToNftSpecifications[_tokenId].bedBaseScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 10) {\\n            tokenIdToNftSpecifications[_tokenId].mattressTechnologyScore =\\n                tokenIdToNftSpecifications[_tokenId].mattressTechnologyScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 11) {\\n            tokenIdToNftSpecifications[_tokenId].mattressThicknessScore =\\n                tokenIdToNftSpecifications[_tokenId].mattressThicknessScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 12) {\\n            tokenIdToNftSpecifications[_tokenId].mattressDeformationScore =\\n                tokenIdToNftSpecifications[_tokenId].mattressDeformationScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 13) {\\n            tokenIdToNftSpecifications[_tokenId].thermalIsolationScore =\\n                tokenIdToNftSpecifications[_tokenId].thermalIsolationScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 14) {\\n            tokenIdToNftSpecifications[_tokenId].hygrometricRegulationScore =\\n                tokenIdToNftSpecifications[_tokenId]\\n                    .hygrometricRegulationScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 15) {\\n            tokenIdToNftSpecifications[_tokenId].comforterComfortabilityScore =\\n                tokenIdToNftSpecifications[_tokenId]\\n                    .comforterComfortabilityScore +\\n                _valueToAdd;\\n        }\\n        if (_indexAttribute == 16) {\\n            tokenIdToNftSpecifications[_tokenId].pillowComfortabilityScore =\\n                tokenIdToNftSpecifications[_tokenId].pillowComfortabilityScore +\\n                _valueToAdd;\\n        }\\n    }\\n\\n    /// @notice Launches the procedure to create an NFT\\n    /// @param _designId Design If the NFT\\n    /// @param _price Price of the NFT\\n    /// @param _category Category of the NFT\\n    /// @param _owner Owner of the NFT\\n    /// @dev This function can only be called by Dex Contract\\n    function mintingBedroomNft(\\n        uint256 _designId,\\n        uint256 _price,\\n        Category _category,\\n        address _owner\\n    ) external {\\n        require(dexAddress != address(0), \\\"Dex address is not configured\\\");\\n        require(msg.sender == dexAddress, \\\"Access forbidden\\\");\\n\\n        uint256 requestId = COORDINATOR.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n\\n        requestIdToTokenId[requestId] = tokenId;\\n\\n        tokenIdToNftOwnership[tokenId] = NftOwnership(\\n            _owner,\\n            _price,\\n            _designId,\\n            0,\\n            _category\\n        );\\n\\n        // Index of next NFT\\n        tokenId++;\\n    }\\n\\n    /// Gets the name of a Nft\\n    /// @param _tokenId Id of the NFT\\n    /// @return _name Name of thr NFT\\n    function getName(uint256 _tokenId) external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"Token #\\\",\\n                    Strings.toString(_tokenId),\\n                    \\\" Level \\\",\\n                    Strings.toString(tokenIdToNftOwnership[_tokenId].level)\\n                )\\n            );\\n    }\\n\\n    /// @dev Callback function with the requested random numbers\\n    /// @param _requestId Chainlink VRF Random Number Request Id\\n    /// @param _randomWords List of random words\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        _mintingBedroomNft(requestIdToTokenId[_requestId], _randomWords);\\n        emit ReturnedRandomness(_randomWords);\\n    }\\n\\n    /// @dev Mints a new Bedroom NFT\\n    /// @param _tokenId Id of the NFT\\n    /// @param _randomWords List of random words\\n    function _mintingBedroomNft(uint256 _tokenId, uint256[] memory _randomWords)\\n        internal\\n    {\\n        // Create new Bedroom\\n        createBedroom(_randomWords, _tokenId);\\n\\n        // Minting of the new Bedroom NFT\\n        _mint(tokenIdToNftOwnership[tokenId].owner, _tokenId, 1, \\\"\\\");\\n\\n        // Set Token URI\\n        string memory DesignName = string(\\n            abi.encodePacked(\\n                Strings.toString(tokenIdToNftOwnership[_tokenId].designId),\\n                fileFormat\\n            )\\n        );\\n        _setURI(_tokenId, DesignName);\\n\\n        emit BedroomNftMinting(\\n            _tokenId,\\n            uri(_tokenId),\\n            tokenIdToNftSpecifications[_tokenId]\\n        );\\n    }\\n\\n    // NFT Upgrading\\n    function upgradeBedroomNft(\\n        uint256 _tokenId,\\n        uint256 _attributeIndex,\\n        uint256 _valueToAdd,\\n        uint256 _newDesignId,\\n        uint256 _amount\\n    ) external {\\n        require(\\n            address(upgradeNftInstance) != address(0),\\n            \\\"UpgradeNft address is not configured\\\"\\n        );\\n        require(msg.sender == address(upgradeNftInstance), \\\"Access forbidden\\\");\\n\\n        // Update Bedroom\\n        updateBedroom(_tokenId, _attributeIndex, _valueToAdd);\\n\\n        // Set Token Level\\n        tokenIdToNftOwnership[_tokenId].level++;\\n\\n        // Set Token price\\n        tokenIdToNftOwnership[_tokenId].price += _amount;\\n\\n        // Set Token URI\\n        string memory DesignName = string(\\n            abi.encodePacked(Strings.toString(_newDesignId), fileFormat)\\n        );\\n        _setURI(_tokenId, DesignName);\\n\\n        emit BedroomNftUpgrading(\\n            _tokenId,\\n            uri(_tokenId),\\n            tokenIdToNftSpecifications[_tokenId]\\n        );\\n    }\\n\\n    // This implementation returns the concatenation of the _baseURI and the token-specific uri if the latter is set\\n    function uri(uint256 _tokenId)\\n        public\\n        view\\n        override(ERC1155Upgradeable, ERC1155URIStorageUpgradeable)\\n        returns (string memory)\\n    {\\n        return super.uri(_tokenId);\\n    }\\n\\n    // Sets tokenURI as the tokenURI of tokenId.\\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI)\\n        external\\n        onlyOwner\\n    {\\n        _setURI(_tokenId, _tokenURI);\\n    }\\n\\n    // Sets baseURI as the _baseURI for all tokens\\n    function setBaseURI(string memory _baseURI) external onlyOwner {\\n        _setBaseURI(_baseURI);\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with storage based token URI management.\\n * Inspired by the ERC721URIStorage extension\\n *\\n * _Available since v4.6._\\n */\\nabstract contract ERC1155URIStorageUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155URIStorage_init() internal onlyInitializing {\\n        __ERC1155URIStorage_init_unchained();\\n    }\\n\\n    function __ERC1155URIStorage_init_unchained() internal onlyInitializing {\\n        _baseURI = \\\"\\\";\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional base URI\\n    string private _baseURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the concatenation of the `_baseURI`\\n     * and the token-specific uri if the latter is set\\n     *\\n     * This enables the following behaviors:\\n     *\\n     * - if `_tokenURIs[tokenId]` is set, then the result is the concatenation\\n     *   of `_baseURI` and `_tokenURIs[tokenId]` (keep in mind that `_baseURI`\\n     *   is empty per default);\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set then we fallback to `super.uri()`\\n     *   which in most cases will contain `ERC1155._uri`;\\n     *\\n     * - if `_tokenURIs[tokenId]` is NOT set, and if the parents do not have a\\n     *   uri value set, then the result is empty.\\n     */\\n    function uri(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory tokenURI = _tokenURIs[tokenId];\\n\\n        // If token URI is set, concatenate base URI and tokenURI (via abi.encodePacked).\\n        return bytes(tokenURI).length > 0 ? string(abi.encodePacked(_baseURI, tokenURI)) : super.uri(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `tokenURI` as the tokenURI of `tokenId`.\\n     */\\n    function _setURI(uint256 tokenId, string memory tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = tokenURI;\\n        emit URI(uri(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `baseURI` as the `_baseURI` for all tokens\\n     */\\n    function _setBaseURI(string memory baseURI) internal virtual {\\n        _baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"},\"contracts/Interfaces/IUpgradeNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\nimport \\\"./IBedroomNft.sol\\\";\\n\\n/// @title Interface of the UpgradeNft Contract\\n/// @author Alexis Balayre\\n/// @notice Contains the external functions of the UpgradeNft Contract\\ninterface IUpgradeNft is IERC1155Upgradeable {\\n    /// @notice Settles the Dex contract address\\n    /// @param _dexAddress Address of the Dex contract\\n    /// @dev This function can only be called by the owner of the contract\\n    function setDex(address _dexAddress) external;\\n\\n    /// @notice Updates chainlink variables\\n    /// @param _callbackGasLimit Callback Gas Limit\\n    /// @param _subscriptionId Chainlink subscription Id\\n    /// @param _keyHash Chainlink Key Hash\\n    /// @dev This function can only be called by the owner of the contract\\n    function updateChainlink(\\n        uint32 _callbackGasLimit,\\n        uint64 _subscriptionId,\\n        bytes32 _keyHash\\n    ) external;\\n\\n    /// @notice Mints a new upgrade NFT\\n    /// @param _newDesignId Id of the new NFT design\\n    /// @param _upgradeDesignId Id of the new upgrade design\\n    /// @param _price Price of the upgrade\\n    /// @param _indexAttribute Index of upgrade attribute\\n    /// @param _valueToAddMax Value Max of the attribute\\n    /// @param _owner Owner of the NFT\\n    function mintingUpgradeNft(\\n        uint256 _newDesignId,\\n        uint256 _upgradeDesignId,\\n        uint256 _price,\\n        uint256 _indexAttribute,\\n        uint256 _valueToAddMax,\\n        address _owner\\n    ) external;\\n\\n    /// @notice Settles the file format of the NFT Design\\n    /// @param _format Format of the design file\\n    /// @dev This function can only be called by the owner of the contract\\n    function setFileFormat(string memory _format) external;\\n\\n    /// @notice Gets the name of an NFT\\n    /// @param _tokenId Id of the NFT\\n    function getName(uint256 _tokenId) external pure returns (string memory);\\n\\n    /// @notice Settles Token URL\\n    /// @dev This function can only be called by the owner of the contract\\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI) external;\\n\\n    /// @notice Settles Base URL\\n    /// @dev This function can only be called by the owner of the contract\\n    function setBaseURI(string memory _baseURI) external;\\n}\\n\"},\"contracts/Interfaces/IBedroomNft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\nimport \\\"./IUpgradeNft.sol\\\";\\n\\n/// @title Interface of the BedroomNft Contract\\n/// @author Alexis Balayre\\n/// @notice Contains the external functions of the BedroomNft Contract\\ninterface IBedroomNft is IERC1155Upgradeable {\\n    /// @notice Enumeration of the different categories of a Bedroom NFT\\n    enum Category {\\n        Studio,\\n        Deluxe,\\n        Luxury\\n    }\\n\\n    /// @notice Administration informations of a Bedroom NFT\\n    struct NftOwnership {\\n        address owner;\\n        uint256 price;\\n        uint256 designId;\\n        uint256 level;\\n        Category category;\\n    }\\n\\n    /// @notice Scores of a Bedroom NFT\\n    struct NftSpecifications {\\n        uint256 lightIsolationScore; // Index 0\\n        uint256 bedroomThermalIsolationScore; // Index 1\\n        uint256 soundIsolationScore; // Index 2\\n        uint256 temperatureScore; // Index 3\\n        uint256 humidityScore; // Index 4\\n        uint256 sleepAidMachinesScore; // Index 5\\n        uint256 circadianRhythmRegulation; // Index 6\\n        uint256 sizeScore; // Index 7\\n        uint256 heightScore; // Index 8\\n        uint256 bedBaseScore; // Index 9\\n        uint256 mattressTechnologyScore; // Index 10\\n        uint256 mattressThicknessScore; // Index 11\\n        uint256 mattressDeformationScore; // Index 12\\n        uint256 thermalIsolationScore; // Index 13\\n        uint256 hygrometricRegulationScore; // Index 14\\n        uint256 comforterComfortabilityScore; // Index 15\\n        uint256 pillowComfortabilityScore; // Index 16\\n    }\\n\\n    /// @notice Inits contracts addresses\\n    /// @param _dexAddress Address of the Dex contract\\n    /// @param _upgradeNftAddress Address of the Upgrade NFT contract\\n    /// @dev This function can only be called by the owner of the contract\\n    /// @dev This function can only be called 1 time\\n    function initContracts(address _dexAddress, IUpgradeNft _upgradeNftAddress)\\n        external;\\n\\n    /// @notice Returns the administration informations of a Bedroom NFT\\n    /// @param _tokenId The id of the NFT\\n    /// @return _struct NftOwnership struct of the Nft\\n    function getNftOwnership(uint256 _tokenId)\\n        external \\n        view\\n        returns (NftOwnership memory _struct);\\n\\n    /// @notice Returns the score of a Bedroom NFT attribute\\n    /// @param _tokenId The id of the NFT\\n    /// @param _indexAttribute The index of the desired attribute\\n    /// @return _score Score of the desired attribute\\n    function getNftSpecifications(uint256 _tokenId, uint256 _indexAttribute)\\n        external\\n        view\\n        returns (uint256 _score);\\n\\n    /// @notice Updates chainlink variables\\n    /// @param _callbackGasLimit Callback Gas Limit\\n    /// @param _subscriptionId Chainlink subscription Id\\n    /// @param _keyHash Chainlink Key Hash\\n    /// @dev This function can only be called by the owner of the contract\\n    function updateChainlink(\\n        uint32 _callbackGasLimit,\\n        uint64 _subscriptionId,\\n        bytes32 _keyHash\\n    ) external;\\n\\n    /// @notice Settles File format\\n    /// @param _format New file format\\n    /// @dev This function can only be called by the owner of the contract\\n    function setFileFormat(string memory _format) external;\\n\\n    /// @notice BedroomNft minting event\\n    event BedroomNftMinting(\\n        uint256 tokenId,\\n        string tokenURI,\\n        NftSpecifications specifications\\n    );\\n\\n    /// @notice Launches the procedure to create an NFT\\n    /// @param _designId Design If the NFT\\n    /// @param _price Price of the NFT\\n    /// @param _category Category of the NFT\\n    /// @param _owner Owner of the NFT\\n    function mintingBedroomNft(\\n        uint256 _designId,\\n        uint256 _price,\\n        Category _category,\\n        address _owner\\n    ) external;\\n\\n    /// Gets the name of a Nft\\n    /// @param _tokenId Id of the NFT\\n    /// @return _name Name of thr NFT\\n    function getName(uint256 _tokenId)\\n        external\\n        view\\n        returns (string memory _name);\\n\\n    /// @notice Mints a Bedroom NFT\\n    event BedroomNftUpgrading(\\n        uint256 tokenId,\\n        string newTokenURI,\\n        NftSpecifications specifications\\n    );\\n\\n    /// @notice Upgrades a Bedroom NFT\\n    /// @param _tokenId Id of the NFT\\n    /// @param _attributeIndex Index of the upgrading attribute\\n    /// @param _valueToAdd Value to add to the upgrading attribute\\n    /// @param _newDesignId New design Id of the NFT\\n    /// @param _amount Price of the upgrade\\n    /// @dev This function can only be called by the Dex contract\\n    function upgradeBedroomNft(\\n        uint256 _tokenId,\\n        uint256 _attributeIndex,\\n        uint256 _valueToAdd,\\n        uint256 _newDesignId,\\n        uint256 _amount\\n    ) external;\\n\\n    /// @notice Settles Token URL\\n    /// @dev This function can only be called by the owner of the contract\\n    function setTokenURI(uint256 _tokenId, string memory _tokenURI) external;\\n\\n    /// @notice Settles Base URL\\n    /// @dev This function can only be called by the owner of the contract\\n    function setBaseURI(string memory _baseURI) external;\\n}\\n\"},\"contracts/Utils/VRFConsumerBaseV2Upgradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nabstract contract VRFConsumerBaseV2Upgradable is\\n    Initializable,\\n    ContextUpgradeable\\n{\\n    error OnlyCoordinatorCanFulfill(address have, address want);\\n    address private vrfCoordinator;\\n\\n    /**\\n     * @param _vrfCoordinator address of VRFCoordinator contract\\n     */\\n    function __VrfCoordinator_init(address _vrfCoordinator)\\n        internal\\n        onlyInitializing\\n    {\\n        vrfCoordinator = _vrfCoordinator;\\n    }\\n\\n    /**\\n     * @notice fulfillRandomness handles the VRF response. Your contract must\\n     * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n     * @notice principles to keep in mind when implementing your fulfillRandomness\\n     * @notice method.\\n     *\\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n     * @dev signature, and will call it once it has verified the proof\\n     * @dev associated with the randomness. (It is triggered via a call to\\n     * @dev rawFulfillRandomness, below.)\\n     *\\n     * @param requestId The Id initially returned by requestRandomness\\n     * @param randomWords the VRF output expanded to the requested number of words\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        virtual;\\n\\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n    // the origin of the call\\n    function rawFulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) external {\\n        if (msg.sender != vrfCoordinator) {\\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n        }\\n        fulfillRandomWords(requestId, randomWords);\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"}}}","address":"0xb150a58d376DeF437AB8b19ab351db7BA2C1eDEe","bytecode":"0x608060405234801561001057600080fd5b50615ed080620000216000396000f3fe608060405234801561001057600080fd5b506004361061014c5760003560e01c80636994f475116100c3578063a22cb4651161007c578063a22cb46514610395578063c8492dbc146103b1578063e985e9c5146103cd578063f242432a146103fd578063f2fde38b14610419578063f4e6a71c146104355761014c565b80636994f475146102e95780636b8ff57414610305578063715018a61461033557806385d90d091461033f57806386b6c9001461035b5780638da5cb5b146103775761014c565b8063162094c411610115578063162094c41461022d57806319a59b1a146102495780631fe543e3146102655780632eb2c2d6146102815780634e1273f41461029d57806355f804b3146102cd5761014c565b8062fdd58e1461015157806301ffc9a71461018157806302f19ecb146101b157806306ef3711146101cd5780630e89341c146101fd575b600080fd5b61016b60048036038101906101669190613ba3565b610465565b6040516101789190613bf2565b60405180910390f35b61019b60048036038101906101969190613c65565b61052e565b6040516101a89190613cad565b60405180910390f35b6101cb60048036038101906101c69190613d06565b610610565b005b6101e760048036038101906101e29190613d46565b610714565b6040516101f49190613bf2565b60405180910390f35b61021760048036038101906102129190613d86565b6109b7565b6040516102249190613e4c565b60405180910390f35b61024760048036038101906102429190613fa3565b6109c9565b005b610263600480360381019061025e9190613fff565b610a53565b005b61027f600480360381019061027a9190614110565b610aea565b005b61029b6004803603810190610296919061420d565b610bae565b005b6102b760048036038101906102b2919061439f565b610c4f565b6040516102c491906144d5565b60405180910390f35b6102e760048036038101906102e29190613fff565b610d68565b005b61030360048036038101906102fe919061451c565b610df0565b005b61031f600480360381019061031a9190613d86565b61114a565b60405161032c9190613e4c565b60405180910390f35b61033d61119c565b005b61035960048036038101906103549190614583565b611224565b005b61037560048036038101906103709190614674565b611445565b005b61037f611624565b60405161038c91906146ea565b60405180910390f35b6103af60048036038101906103aa9190614731565b61164e565b005b6103cb60048036038101906103c691906147e7565b611664565b005b6103e760048036038101906103e2919061484e565b611758565b6040516103f49190613cad565b60405180910390f35b6104176004803603810190610412919061488e565b6117ec565b005b610433600480360381019061042e9190614925565b61188d565b005b61044f600480360381019061044a9190613d86565b611984565b60405161045c9190614a40565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cc90614acd565b60405180910390fd5b6097600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f957507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610609575061060882611a61565b5b9050919050565b610618611acb565b73ffffffffffffffffffffffffffffffffffffffff16610636611624565b73ffffffffffffffffffffffffffffffffffffffff161461068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390614b39565b60405180910390fd5b8161012d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508061012e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080820361073c5761013660008481526020019081526020016000206000015490506109b1565b600182036107635761013660008481526020019081526020016000206001015490506109b1565b6002820361078a5761013660008481526020019081526020016000206002015490506109b1565b600382036107b15761013660008481526020019081526020016000206003015490506109b1565b600482036107d85761013660008481526020019081526020016000206004015490506109b1565b600582036107ff5761013660008481526020019081526020016000206005015490506109b1565b600682036108265761013660008481526020019081526020016000206006015490506109b1565b6007820361084d5761013660008481526020019081526020016000206007015490506109b1565b600882036108745761013660008481526020019081526020016000206008015490506109b1565b6009820361089b5761013660008481526020019081526020016000206009015490506109b1565b600a82036108c2576101366000848152602001908152602001600020600a015490506109b1565b600b82036108e9576101366000848152602001908152602001600020600b015490506109b1565b600c8203610910576101366000848152602001908152602001600020600c015490506109b1565b600d8203610937576101366000848152602001908152602001600020600d015490506109b1565b600e820361095e576101366000848152602001908152602001600020600e015490506109b1565b600f8203610985576101366000848152602001908152602001600020600f015490506109b1565b601082036109ac5761013660008481526020019081526020016000206010015490506109b1565b600090505b92915050565b60606109c282611ad3565b9050919050565b6109d1611acb565b73ffffffffffffffffffffffffffffffffffffffff166109ef611624565b73ffffffffffffffffffffffffffffffffffffffff1614610a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3c90614b39565b60405180910390fd5b610a4f8282611bb8565b5050565b610a5b611acb565b73ffffffffffffffffffffffffffffffffffffffff16610a79611624565b73ffffffffffffffffffffffffffffffffffffffff1614610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690614b39565b60405180910390fd5b806101339080519060200190610ae6929190613a01565b5050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ba05733603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610b97929190614b59565b60405180910390fd5b610baa8282611c24565b5050565b610bb6611acb565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610bfc5750610bfb85610bf6611acb565b611758565b5b610c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3290614bf4565b60405180910390fd5b610c488585858585611c7d565b5050505050565b60608151835114610c95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8c90614c86565b60405180910390fd5b6000835167ffffffffffffffff811115610cb257610cb1613e78565b5b604051908082528060200260200182016040528015610ce05781602001602082028036833780820191505090505b50905060005b8451811015610d5d57610d2d858281518110610d0557610d04614ca6565b5b6020026020010151858381518110610d2057610d1f614ca6565b5b6020026020010151610465565b828281518110610d4057610d3f614ca6565b5b60200260200101818152505080610d5690614d04565b9050610ce6565b508091505092915050565b610d70611acb565b73ffffffffffffffffffffffffffffffffffffffff16610d8e611624565b73ffffffffffffffffffffffffffffffffffffffff1614610de4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddb90614b39565b60405180910390fd5b610ded81611fa1565b50565b600073ffffffffffffffffffffffffffffffffffffffff1661012d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7990614d98565b60405180910390fd5b61012d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0a90614e04565b60405180910390fd5b600061012f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d306101325461013160009054906101000a900467ffffffffffffffff16610130601c9054906101000a900461ffff1661013060189054906101000a900463ffffffff1661013060149054906101000a900463ffffffff166040518663ffffffff1660e01b8152600401610fca959493929190614e60565b6020604051808303816000875af1158015610fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100d9190614ec8565b9050610134546101356000838152602001908152602001600020819055506040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018681526020016000815260200184600281111561107857611077614961565b5b815250610137600061013454815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083600281111561112257611121614961565b5b0217905550905050610134600081548092919061113e90614d04565b91905055505050505050565b606061115582611fbb565b611175610137600085815260200190815260200160002060030154611fbb565b604051602001611186929190614fc9565b6040516020818303038152906040529050919050565b6111a4611acb565b73ffffffffffffffffffffffffffffffffffffffff166111c2611624565b73ffffffffffffffffffffffffffffffffffffffff1614611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120f90614b39565b60405180910390fd5b611222600061211b565b565b600073ffffffffffffffffffffffffffffffffffffffff1661012e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036112b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ad90615075565b60405180910390fd5b61012e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133e90614e04565b60405180910390fd5b6113528585856121e1565b6101376000868152602001908152602001600020600301600081548092919061137a90614d04565b919050555080610137600087815260200190815260200160002060010160008282546113a69190615095565b9250508190555060006113b883611fbb565b6101336040516020016113cc9291906151df565b60405160208183030381529060405290506113e78682611bb8565b7f2ec36d35d7abde731d786e3a7f946aaf9de9625dc8a7f4115557f0304edd17cb86611412886109b7565b61013660008a815260200190815260200160002060405161143593929190615447565b60405180910390a1505050505050565b6000611451600161269d565b90508015611475576001600060016101000a81548160ff0219169083151502179055505b61148d6040518060200160405280600081525061278d565b6114956127e8565b61149e84612841565b8361012f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508261013060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508461013160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081610132819055506206ddd061013060186101000a81548163ffffffff021916908363ffffffff1602179055506006610130601c6101000a81548161ffff021916908361ffff160217905550601161013060146101000a81548163ffffffff021916908363ffffffff160217905550600061013481905550801561161d5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161161491906154d8565b60405180910390a15b5050505050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611660611659611acb565b83836128d4565b5050565b61166c611acb565b73ffffffffffffffffffffffffffffffffffffffff1661168a611624565b73ffffffffffffffffffffffffffffffffffffffff16146116e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d790614b39565b60405180910390fd5b8261013160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081610132819055508361013060186101000a81548163ffffffff021916908363ffffffff16021790555080610130601c6101000a81548161ffff021916908361ffff16021790555050505050565b6000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6117f4611acb565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061183a575061183985611834611acb565b611758565b5b611879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187090615565565b60405180910390fd5b6118868585858585612a40565b5050505050565b611895611acb565b73ffffffffffffffffffffffffffffffffffffffff166118b3611624565b73ffffffffffffffffffffffffffffffffffffffff1614611909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190090614b39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196f906155f7565b60405180910390fd5b6119818161211b565b50565b61198c613a87565b61013760008381526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff166002811115611a4457611a43614961565b5b6002811115611a5657611a55614961565b5b815250509050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b6060600060fc60008481526020019081526020016000208054611af59061511a565b80601f0160208091040260200160405190810160405280929190818152602001828054611b219061511a565b8015611b6e5780601f10611b4357610100808354040283529160200191611b6e565b820191906000526020600020905b815481529060010190602001808311611b5157829003601f168201915b505050505090506000815111611b8c57611b8783612cde565b611bb0565b60fb81604051602001611ba0929190615617565b6040516020818303038152906040525b915050919050565b8060fc60008481526020019081526020016000209080519060200190611bdf929190613a01565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b611c0b846109b7565b604051611c189190613e4c565b60405180910390a25050565b611c4261013560008481526020019081526020016000205482612d72565b7fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e81604051611c7191906144d5565b60405180910390a15050565b8151835114611cc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb8906156ad565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611d30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d279061573f565b60405180910390fd5b6000611d3a611acb565b9050611d4a818787878787612e7e565b60005b8451811015611efe576000858281518110611d6b57611d6a614ca6565b5b602002602001015190506000858381518110611d8a57611d89614ca6565b5b6020026020010151905060006097600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e23906157d1565b60405180910390fd5b8181036097600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816097600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ee39190615095565b9250508190555050505080611ef790614d04565b9050611d4d565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611f759291906157f1565b60405180910390a4611f8b818787878787612e86565b611f99818787878787612e8e565b505050505050565b8060fb9080519060200190611fb7929190613a01565b5050565b606060008203612002576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612116565b600082905060005b6000821461203457808061201d90614d04565b915050600a8261202d9190615857565b915061200a565b60008167ffffffffffffffff8111156120505761204f613e78565b5b6040519080825280601f01601f1916602001820160405280156120825781602001600182028036833780820191505090505b5090505b6000851461210f5760018261209b9190615888565b9150600a856120aa91906158bc565b60306120b69190615095565b60f81b8183815181106120cc576120cb614ca6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856121089190615857565b9450612086565b8093505050505b919050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008203612228578061013660008581526020019081526020016000206000015461220c9190615095565b6101366000858152602001908152602001600020600001819055505b6001820361226f57806101366000858152602001908152602001600020600101546122539190615095565b6101366000858152602001908152602001600020600101819055505b600282036122b6578061013660008581526020019081526020016000206002015461229a9190615095565b6101366000858152602001908152602001600020600201819055505b600382036122fd57806101366000858152602001908152602001600020600301546122e19190615095565b6101366000858152602001908152602001600020600301819055505b6004820361234457806101366000858152602001908152602001600020600401546123289190615095565b6101366000858152602001908152602001600020600401819055505b6005820361238b578061013660008581526020019081526020016000206005015461236f9190615095565b6101366000858152602001908152602001600020600501819055505b600682036123d257806101366000858152602001908152602001600020600601546123b69190615095565b6101366000858152602001908152602001600020600601819055505b6007820361241957806101366000858152602001908152602001600020600701546123fd9190615095565b6101366000858152602001908152602001600020600701819055505b6008820361246057806101366000858152602001908152602001600020600801546124449190615095565b6101366000858152602001908152602001600020600801819055505b600982036124a7578061013660008581526020019081526020016000206009015461248b9190615095565b6101366000858152602001908152602001600020600901819055505b600a82036124ee57806101366000858152602001908152602001600020600a01546124d29190615095565b6101366000858152602001908152602001600020600a01819055505b600b820361253557806101366000858152602001908152602001600020600b01546125199190615095565b6101366000858152602001908152602001600020600b01819055505b600c820361257c57806101366000858152602001908152602001600020600c01546125609190615095565b6101366000858152602001908152602001600020600c01819055505b600d82036125c357806101366000858152602001908152602001600020600d01546125a79190615095565b6101366000858152602001908152602001600020600d01819055505b600e820361260a57806101366000858152602001908152602001600020600e01546125ee9190615095565b6101366000858152602001908152602001600020600e01819055505b600f820361265157806101366000858152602001908152602001600020600f01546126359190615095565b6101366000858152602001908152602001600020600f01819055505b60108203612698578061013660008581526020019081526020016000206010015461267c9190615095565b6101366000858152602001908152602001600020601001819055505b505050565b60008060019054906101000a900460ff16156127145760018260ff161480156126cc57506126ca30613065565b155b61270b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127029061595f565b60405180910390fd5b60009050612788565b8160ff1660008054906101000a900460ff1660ff1610612769576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127609061595f565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff166127dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d3906159f1565b60405180910390fd5b6127e581613088565b50565b600060019054906101000a900460ff16612837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282e906159f1565b60405180910390fd5b61283f6130e3565b565b600060019054906101000a900460ff16612890576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612887906159f1565b60405180910390fd5b80603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293990615a83565b60405180910390fd5b80609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612a339190613cad565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612aaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa69061573f565b60405180910390fd5b6000612ab9611acb565b90506000612ac685613144565b90506000612ad385613144565b9050612ae3838989858589612e7e565b60006097600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905085811015612b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b72906157d1565b60405180910390fd5b8581036097600089815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550856097600089815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c329190615095565b925050819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628a8a604051612caf929190615aa3565b60405180910390a4612cc5848a8a86868a612e86565b612cd3848a8a8a8a8a6131be565b505050505050505050565b606060998054612ced9061511a565b80601f0160208091040260200160405190810160405280929190818152602001828054612d199061511a565b8015612d665780601f10612d3b57610100808354040283529160200191612d66565b820191906000526020600020905b815481529060010190602001808311612d4957829003601f168201915b50505050509050919050565b612d7c8183613395565b612dd2610137600061013454815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600160405180602001604052806000815250613836565b6000612df4610137600085815260200190815260200160002060020154611fbb565b610133604051602001612e089291906151df565b6040516020818303038152906040529050612e238382611bb8565b7f81d0d0c12c6ca6c8fd87061fc7856093622d0ac0e30aea027a73111a5fd047f583612e4e856109b7565b6101366000878152602001908152602001600020604051612e7193929190615447565b60405180910390a1505050565b505050505050565b505050505050565b612ead8473ffffffffffffffffffffffffffffffffffffffff16613065565b1561305d578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612ef3959493929190615b21565b6020604051808303816000875af1925050508015612f2f57506040513d601f19601f82011682018060405250810190612f2c9190615b9e565b60015b612fd457612f3b615bd8565b806308c379a003612f975750612f4f615bfa565b80612f5a5750612f99565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8e9190613e4c565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fcb90615cfc565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461305b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305290615d8e565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166130d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130ce906159f1565b60405180910390fd5b6130e0816139e7565b50565b600060019054906101000a900460ff16613132576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613129906159f1565b60405180910390fd5b61314261313d611acb565b61211b565b565b60606000600167ffffffffffffffff81111561316357613162613e78565b5b6040519080825280602002602001820160405280156131915781602001602082028036833780820191505090505b50905082816000815181106131a9576131a8614ca6565b5b60200260200101818152505080915050919050565b6131dd8473ffffffffffffffffffffffffffffffffffffffff16613065565b1561338d578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401613223959493929190615dae565b6020604051808303816000875af192505050801561325f57506040513d601f19601f8201168201806040525081019061325c9190615b9e565b60015b6133045761326b615bd8565b806308c379a0036132c7575061327f615bfa565b8061328a57506132c9565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132be9190613e4c565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132fb90615cfc565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461338b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338290615d8e565b60405180910390fd5b505b505050505050565b60405180610220016040528060016064856000815181106133b9576133b8614ca6565b5b60200260200101516133cb91906158bc565b6133d59190615095565b815260200160016064856001815181106133f2576133f1614ca6565b5b602002602001015161340491906158bc565b61340e9190615095565b8152602001600160648560028151811061342b5761342a614ca6565b5b602002602001015161343d91906158bc565b6134479190615095565b8152602001600160648560038151811061346457613463614ca6565b5b602002602001015161347691906158bc565b6134809190615095565b8152602001600160648560048151811061349d5761349c614ca6565b5b60200260200101516134af91906158bc565b6134b99190615095565b815260200160016064856005815181106134d6576134d5614ca6565b5b60200260200101516134e891906158bc565b6134f29190615095565b8152602001600160648560068151811061350f5761350e614ca6565b5b602002602001015161352191906158bc565b61352b9190615095565b8152602001600160648560078151811061354857613547614ca6565b5b602002602001015161355a91906158bc565b6135649190615095565b8152602001600160648560088151811061358157613580614ca6565b5b602002602001015161359391906158bc565b61359d9190615095565b815260200160016064856009815181106135ba576135b9614ca6565b5b60200260200101516135cc91906158bc565b6135d69190615095565b81526020016001606485600a815181106135f3576135f2614ca6565b5b602002602001015161360591906158bc565b61360f9190615095565b81526020016001606485600b8151811061362c5761362b614ca6565b5b602002602001015161363e91906158bc565b6136489190615095565b81526020016001606485600c8151811061366557613664614ca6565b5b602002602001015161367791906158bc565b6136819190615095565b81526020016001606485600d8151811061369e5761369d614ca6565b5b60200260200101516136b091906158bc565b6136ba9190615095565b81526020016001606485600e815181106136d7576136d6614ca6565b5b60200260200101516136e991906158bc565b6136f39190615095565b81526020016001606485600f815181106137105761370f614ca6565b5b602002602001015161372291906158bc565b61372c9190615095565b8152602001600160648560108151811061374957613748614ca6565b5b602002602001015161375b91906158bc565b6137659190615095565b8152506101366000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c01556101a082015181600d01556101c082015181600e01556101e082015181600f015561020082015181601001559050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036138a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161389c90615e7a565b60405180910390fd5b60006138af611acb565b905060006138bc85613144565b905060006138c985613144565b90506138da83600089858589612e7e565b846097600088815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461393a9190615095565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6289896040516139b8929190615aa3565b60405180910390a46139cf83600089858589612e86565b6139de836000898989896131be565b50505050505050565b80609990805190602001906139fd929190613a01565b5050565b828054613a0d9061511a565b90600052602060002090601f016020900481019282613a2f5760008555613a76565b82601f10613a4857805160ff1916838001178555613a76565b82800160010185558215613a76579182015b82811115613a75578251825591602001919060010190613a5a565b5b509050613a839190613ade565b5090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160006002811115613ad857613ad7614961565b5b81525090565b5b80821115613af7576000816000905550600101613adf565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613b3a82613b0f565b9050919050565b613b4a81613b2f565b8114613b5557600080fd5b50565b600081359050613b6781613b41565b92915050565b6000819050919050565b613b8081613b6d565b8114613b8b57600080fd5b50565b600081359050613b9d81613b77565b92915050565b60008060408385031215613bba57613bb9613b05565b5b6000613bc885828601613b58565b9250506020613bd985828601613b8e565b9150509250929050565b613bec81613b6d565b82525050565b6000602082019050613c076000830184613be3565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613c4281613c0d565b8114613c4d57600080fd5b50565b600081359050613c5f81613c39565b92915050565b600060208284031215613c7b57613c7a613b05565b5b6000613c8984828501613c50565b91505092915050565b60008115159050919050565b613ca781613c92565b82525050565b6000602082019050613cc26000830184613c9e565b92915050565b6000613cd382613b2f565b9050919050565b613ce381613cc8565b8114613cee57600080fd5b50565b600081359050613d0081613cda565b92915050565b60008060408385031215613d1d57613d1c613b05565b5b6000613d2b85828601613b58565b9250506020613d3c85828601613cf1565b9150509250929050565b60008060408385031215613d5d57613d5c613b05565b5b6000613d6b85828601613b8e565b9250506020613d7c85828601613b8e565b9150509250929050565b600060208284031215613d9c57613d9b613b05565b5b6000613daa84828501613b8e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613ded578082015181840152602081019050613dd2565b83811115613dfc576000848401525b50505050565b6000601f19601f8301169050919050565b6000613e1e82613db3565b613e288185613dbe565b9350613e38818560208601613dcf565b613e4181613e02565b840191505092915050565b60006020820190508181036000830152613e668184613e13565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613eb082613e02565b810181811067ffffffffffffffff82111715613ecf57613ece613e78565b5b80604052505050565b6000613ee2613afb565b9050613eee8282613ea7565b919050565b600067ffffffffffffffff821115613f0e57613f0d613e78565b5b613f1782613e02565b9050602081019050919050565b82818337600083830152505050565b6000613f46613f4184613ef3565b613ed8565b905082815260208101848484011115613f6257613f61613e73565b5b613f6d848285613f24565b509392505050565b600082601f830112613f8a57613f89613e6e565b5b8135613f9a848260208601613f33565b91505092915050565b60008060408385031215613fba57613fb9613b05565b5b6000613fc885828601613b8e565b925050602083013567ffffffffffffffff811115613fe957613fe8613b0a565b5b613ff585828601613f75565b9150509250929050565b60006020828403121561401557614014613b05565b5b600082013567ffffffffffffffff81111561403357614032613b0a565b5b61403f84828501613f75565b91505092915050565b600067ffffffffffffffff82111561406357614062613e78565b5b602082029050602081019050919050565b600080fd5b600061408c61408784614048565b613ed8565b905080838252602082019050602084028301858111156140af576140ae614074565b5b835b818110156140d857806140c48882613b8e565b8452602084019350506020810190506140b1565b5050509392505050565b600082601f8301126140f7576140f6613e6e565b5b8135614107848260208601614079565b91505092915050565b6000806040838503121561412757614126613b05565b5b600061413585828601613b8e565b925050602083013567ffffffffffffffff81111561415657614155613b0a565b5b614162858286016140e2565b9150509250929050565b600067ffffffffffffffff82111561418757614186613e78565b5b61419082613e02565b9050602081019050919050565b60006141b06141ab8461416c565b613ed8565b9050828152602081018484840111156141cc576141cb613e73565b5b6141d7848285613f24565b509392505050565b600082601f8301126141f4576141f3613e6e565b5b813561420484826020860161419d565b91505092915050565b600080600080600060a0868803121561422957614228613b05565b5b600061423788828901613b58565b955050602061424888828901613b58565b945050604086013567ffffffffffffffff81111561426957614268613b0a565b5b614275888289016140e2565b935050606086013567ffffffffffffffff81111561429657614295613b0a565b5b6142a2888289016140e2565b925050608086013567ffffffffffffffff8111156142c3576142c2613b0a565b5b6142cf888289016141df565b9150509295509295909350565b600067ffffffffffffffff8211156142f7576142f6613e78565b5b602082029050602081019050919050565b600061431b614316846142dc565b613ed8565b9050808382526020820190506020840283018581111561433e5761433d614074565b5b835b8181101561436757806143538882613b58565b845260208401935050602081019050614340565b5050509392505050565b600082601f83011261438657614385613e6e565b5b8135614396848260208601614308565b91505092915050565b600080604083850312156143b6576143b5613b05565b5b600083013567ffffffffffffffff8111156143d4576143d3613b0a565b5b6143e085828601614371565b925050602083013567ffffffffffffffff81111561440157614400613b0a565b5b61440d858286016140e2565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61444c81613b6d565b82525050565b600061445e8383614443565b60208301905092915050565b6000602082019050919050565b600061448282614417565b61448c8185614422565b935061449783614433565b8060005b838110156144c85781516144af8882614452565b97506144ba8361446a565b92505060018101905061449b565b5085935050505092915050565b600060208201905081810360008301526144ef8184614477565b905092915050565b6003811061450457600080fd5b50565b600081359050614516816144f7565b92915050565b6000806000806080858703121561453657614535613b05565b5b600061454487828801613b8e565b945050602061455587828801613b8e565b935050604061456687828801614507565b925050606061457787828801613b58565b91505092959194509250565b600080600080600060a0868803121561459f5761459e613b05565b5b60006145ad88828901613b8e565b95505060206145be88828901613b8e565b94505060406145cf88828901613b8e565b93505060606145e088828901613b8e565b92505060806145f188828901613b8e565b9150509295509295909350565b600067ffffffffffffffff82169050919050565b61461b816145fe565b811461462657600080fd5b50565b60008135905061463881614612565b92915050565b6000819050919050565b6146518161463e565b811461465c57600080fd5b50565b60008135905061466e81614648565b92915050565b6000806000806080858703121561468e5761468d613b05565b5b600061469c87828801614629565b94505060206146ad87828801613b58565b93505060406146be87828801613b58565b92505060606146cf8782880161465f565b91505092959194509250565b6146e481613b2f565b82525050565b60006020820190506146ff60008301846146db565b92915050565b61470e81613c92565b811461471957600080fd5b50565b60008135905061472b81614705565b92915050565b6000806040838503121561474857614747613b05565b5b600061475685828601613b58565b92505060206147678582860161471c565b9150509250929050565b600063ffffffff82169050919050565b61478a81614771565b811461479557600080fd5b50565b6000813590506147a781614781565b92915050565b600061ffff82169050919050565b6147c4816147ad565b81146147cf57600080fd5b50565b6000813590506147e1816147bb565b92915050565b6000806000806080858703121561480157614800613b05565b5b600061480f87828801614798565b945050602061482087828801614629565b93505060406148318782880161465f565b9250506060614842878288016147d2565b91505092959194509250565b6000806040838503121561486557614864613b05565b5b600061487385828601613b58565b925050602061488485828601613b58565b9150509250929050565b600080600080600060a086880312156148aa576148a9613b05565b5b60006148b888828901613b58565b95505060206148c988828901613b58565b94505060406148da88828901613b8e565b93505060606148eb88828901613b8e565b925050608086013567ffffffffffffffff81111561490c5761490b613b0a565b5b614918888289016141df565b9150509295509295909350565b60006020828403121561493b5761493a613b05565b5b600061494984828501613b58565b91505092915050565b61495b81613b2f565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106149a1576149a0614961565b5b50565b60008190506149b282614990565b919050565b60006149c2826149a4565b9050919050565b6149d2816149b7565b82525050565b60a0820160008201516149ee6000850182614952565b506020820151614a016020850182614443565b506040820151614a146040850182614443565b506060820151614a276060850182614443565b506080820151614a3a60808501826149c9565b50505050565b600060a082019050614a5560008301846149d8565b92915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000614ab7602b83613dbe565b9150614ac282614a5b565b604082019050919050565b60006020820190508181036000830152614ae681614aaa565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614b23602083613dbe565b9150614b2e82614aed565b602082019050919050565b60006020820190508181036000830152614b5281614b16565b9050919050565b6000604082019050614b6e60008301856146db565b614b7b60208301846146db565b9392505050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000614bde603283613dbe565b9150614be982614b82565b604082019050919050565b60006020820190508181036000830152614c0d81614bd1565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000614c70602983613dbe565b9150614c7b82614c14565b604082019050919050565b60006020820190508181036000830152614c9f81614c63565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614d0f82613b6d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614d4157614d40614cd5565b5b600182019050919050565b7f4465782061646472657373206973206e6f7420636f6e66696775726564000000600082015250565b6000614d82601d83613dbe565b9150614d8d82614d4c565b602082019050919050565b60006020820190508181036000830152614db181614d75565b9050919050565b7f41636365737320666f7262696464656e00000000000000000000000000000000600082015250565b6000614dee601083613dbe565b9150614df982614db8565b602082019050919050565b60006020820190508181036000830152614e1d81614de1565b9050919050565b614e2d8161463e565b82525050565b614e3c816145fe565b82525050565b614e4b816147ad565b82525050565b614e5a81614771565b82525050565b600060a082019050614e756000830188614e24565b614e826020830187614e33565b614e8f6040830186614e42565b614e9c6060830185614e51565b614ea96080830184614e51565b9695505050505050565b600081519050614ec281613b77565b92915050565b600060208284031215614ede57614edd613b05565b5b6000614eec84828501614eb3565b91505092915050565b600081905092915050565b7f546f6b656e202300000000000000000000000000000000000000000000000000600082015250565b6000614f36600783614ef5565b9150614f4182614f00565b600782019050919050565b6000614f5782613db3565b614f618185614ef5565b9350614f71818560208601613dcf565b80840191505092915050565b7f204c6576656c2000000000000000000000000000000000000000000000000000600082015250565b6000614fb3600783614ef5565b9150614fbe82614f7d565b600782019050919050565b6000614fd482614f29565b9150614fe08285614f4c565b9150614feb82614fa6565b9150614ff78284614f4c565b91508190509392505050565b7f557067726164654e66742061646472657373206973206e6f7420636f6e66696760008201527f7572656400000000000000000000000000000000000000000000000000000000602082015250565b600061505f602483613dbe565b915061506a82615003565b604082019050919050565b6000602082019050818103600083015261508e81615052565b9050919050565b60006150a082613b6d565b91506150ab83613b6d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156150e0576150df614cd5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061513257607f821691505b602082108103615145576151446150eb565b5b50919050565b60008190508160005260206000209050919050565b6000815461516d8161511a565b6151778186614ef5565b9450600182166000811461519257600181146151a3576151d6565b60ff198316865281860193506151d6565b6151ac8561514b565b60005b838110156151ce578154818901526001820191506020810190506151af565b838801955050505b50505092915050565b60006151eb8285614f4c565b91506151f78284615160565b91508190509392505050565b60008160001c9050919050565b6000819050919050565b600061522d61522883615203565b615210565b9050919050565b6102208201600080830154905061524a8161521a565b6152576000860182614443565b50600183015490506152688161521a565b6152756020860182614443565b50600283015490506152868161521a565b6152936040860182614443565b50600383015490506152a48161521a565b6152b16060860182614443565b50600483015490506152c28161521a565b6152cf6080860182614443565b50600583015490506152e08161521a565b6152ed60a0860182614443565b50600683015490506152fe8161521a565b61530b60c0860182614443565b506007830154905061531c8161521a565b61532960e0860182614443565b506008830154905061533a8161521a565b615348610100860182614443565b50600983015490506153598161521a565b615367610120860182614443565b50600a83015490506153788161521a565b615386610140860182614443565b50600b83015490506153978161521a565b6153a5610160860182614443565b50600c83015490506153b68161521a565b6153c4610180860182614443565b50600d83015490506153d58161521a565b6153e36101a0860182614443565b50600e83015490506153f48161521a565b6154026101c0860182614443565b50600f83015490506154138161521a565b6154216101e0860182614443565b50601083015490506154328161521a565b615440610200860182614443565b5050505050565b60006102608201905061545d6000830186613be3565b818103602083015261546f8185613e13565b905061547e6040830184615234565b949350505050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006154c26154bd6154b884615486565b61549d565b615490565b9050919050565b6154d2816154a7565b82525050565b60006020820190506154ed60008301846154c9565b92915050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b600061554f602983613dbe565b915061555a826154f3565b604082019050919050565b6000602082019050818103600083015261557e81615542565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006155e1602683613dbe565b91506155ec82615585565b604082019050919050565b60006020820190508181036000830152615610816155d4565b9050919050565b60006156238285615160565b915061562f8284614f4c565b91508190509392505050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000615697602883613dbe565b91506156a28261563b565b604082019050919050565b600060208201905081810360008301526156c68161568a565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000615729602583613dbe565b9150615734826156cd565b604082019050919050565b600060208201905081810360008301526157588161571c565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006157bb602a83613dbe565b91506157c68261575f565b604082019050919050565b600060208201905081810360008301526157ea816157ae565b9050919050565b6000604082019050818103600083015261580b8185614477565b9050818103602083015261581f8184614477565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061586282613b6d565b915061586d83613b6d565b92508261587d5761587c615828565b5b828204905092915050565b600061589382613b6d565b915061589e83613b6d565b9250828210156158b1576158b0614cd5565b5b828203905092915050565b60006158c782613b6d565b91506158d283613b6d565b9250826158e2576158e1615828565b5b828206905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000615949602e83613dbe565b9150615954826158ed565b604082019050919050565b600060208201905081810360008301526159788161593c565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006159db602b83613dbe565b91506159e68261597f565b604082019050919050565b60006020820190508181036000830152615a0a816159ce565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000615a6d602983613dbe565b9150615a7882615a11565b604082019050919050565b60006020820190508181036000830152615a9c81615a60565b9050919050565b6000604082019050615ab86000830185613be3565b615ac56020830184613be3565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000615af382615acc565b615afd8185615ad7565b9350615b0d818560208601613dcf565b615b1681613e02565b840191505092915050565b600060a082019050615b3660008301886146db565b615b4360208301876146db565b8181036040830152615b558186614477565b90508181036060830152615b698185614477565b90508181036080830152615b7d8184615ae8565b90509695505050505050565b600081519050615b9881613c39565b92915050565b600060208284031215615bb457615bb3613b05565b5b6000615bc284828501615b89565b91505092915050565b60008160e01c9050919050565b600060033d1115615bf75760046000803e615bf4600051615bcb565b90505b90565b600060443d10615c8757615c0c613afb565b60043d036004823e80513d602482011167ffffffffffffffff82111715615c34575050615c87565b808201805167ffffffffffffffff811115615c525750505050615c87565b80602083010160043d038501811115615c6f575050505050615c87565b615c7e82602001850186613ea7565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000615ce6603483613dbe565b9150615cf182615c8a565b604082019050919050565b60006020820190508181036000830152615d1581615cd9565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000615d78602883613dbe565b9150615d8382615d1c565b604082019050919050565b60006020820190508181036000830152615da781615d6b565b9050919050565b600060a082019050615dc360008301886146db565b615dd060208301876146db565b615ddd6040830186613be3565b615dea6060830185613be3565b8181036080830152615dfc8184615ae8565b90509695505050505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615e64602183613dbe565b9150615e6f82615e08565b604082019050919050565b60006020820190508181036000830152615e9381615e57565b905091905056fea2646970667358221220f51ae4a32fb9c7d59347b48cb0be6830f706517b0bb3a851c08c4abca743bfae64736f6c634300080d0033","deployedBytecode":"","abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"string","name":"tokenURI","type":"string"},{"components":[{"internalType":"uint256","name":"lightIsolationScore","type":"uint256"},{"internalType":"uint256","name":"bedroomThermalIsolationScore","type":"uint256"},{"internalType":"uint256","name":"soundIsolationScore","type":"uint256"},{"internalType":"uint256","name":"temperatureScore","type":"uint256"},{"internalType":"uint256","name":"humidityScore","type":"uint256"},{"internalType":"uint256","name":"sleepAidMachinesScore","type":"uint256"},{"internalType":"uint256","name":"circadianRhythmRegulation","type":"uint256"},{"internalType":"uint256","name":"sizeScore","type":"uint256"},{"internalType":"uint256","name":"heightScore","type":"uint256"},{"internalType":"uint256","name":"bedBaseScore","type":"uint256"},{"internalType":"uint256","name":"mattressTechnologyScore","type":"uint256"},{"internalType":"uint256","name":"mattressThicknessScore","type":"uint256"},{"internalType":"uint256","name":"mattressDeformationScore","type":"uint256"},{"internalType":"uint256","name":"thermalIsolationScore","type":"uint256"},{"internalType":"uint256","name":"hygrometricRegulationScore","type":"uint256"},{"internalType":"uint256","name":"comforterComfortabilityScore","type":"uint256"},{"internalType":"uint256","name":"pillowComfortabilityScore","type":"uint256"}],"indexed":false,"internalType":"struct BedroomNft.NftSpecifications","name":"specifications","type":"tuple"}],"name":"BedroomNftMinting","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"string","name":"newTokenURI","type":"string"},{"components":[{"internalType":"uint256","name":"lightIsolationScore","type":"uint256"},{"internalType":"uint256","name":"bedroomThermalIsolationScore","type":"uint256"},{"internalType":"uint256","name":"soundIsolationScore","type":"uint256"},{"internalType":"uint256","name":"temperatureScore","type":"uint256"},{"internalType":"uint256","name":"humidityScore","type":"uint256"},{"internalType":"uint256","name":"sleepAidMachinesScore","type":"uint256"},{"internalType":"uint256","name":"circadianRhythmRegulation","type":"uint256"},{"internalType":"uint256","name":"sizeScore","type":"uint256"},{"internalType":"uint256","name":"heightScore","type":"uint256"},{"internalType":"uint256","name":"bedBaseScore","type":"uint256"},{"internalType":"uint256","name":"mattressTechnologyScore","type":"uint256"},{"internalType":"uint256","name":"mattressThicknessScore","type":"uint256"},{"internalType":"uint256","name":"mattressDeformationScore","type":"uint256"},{"internalType":"uint256","name":"thermalIsolationScore","type":"uint256"},{"internalType":"uint256","name":"hygrometricRegulationScore","type":"uint256"},{"internalType":"uint256","name":"comforterComfortabilityScore","type":"uint256"},{"internalType":"uint256","name":"pillowComfortabilityScore","type":"uint256"}],"indexed":false,"internalType":"struct BedroomNft.NftSpecifications","name":"specifications","type":"tuple"}],"name":"BedroomNftUpgrading","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"ReturnedRandomness","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getName","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getNftOwnership","outputs":[{"components":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"price","type":"uint256"},{"internalType":"uint256","name":"designId","type":"uint256"},{"internalType":"uint256","name":"level","type":"uint256"},{"internalType":"enum BedroomNft.Category","name":"category","type":"uint8"}],"internalType":"struct BedroomNft.NftOwnership","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_indexAttribute","type":"uint256"}],"name":"getNftSpecifications","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dexAddress","type":"address"},{"internalType":"contract IUpgradeNft","name":"_upgradeNftAddress","type":"address"}],"name":"initContracts","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"_subscriptionId","type":"uint64"},{"internalType":"address","name":"_vrfCoordinator","type":"address"},{"internalType":"address","name":"_link_token_contract","type":"address"},{"internalType":"bytes32","name":"_keyHash","type":"bytes32"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_designId","type":"uint256"},{"internalType":"uint256","name":"_price","type":"uint256"},{"internalType":"enum BedroomNft.Category","name":"_category","type":"uint8"},{"internalType":"address","name":"_owner","type":"address"}],"name":"mintingBedroomNft","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_baseURI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_format","type":"string"}],"name":"setFileFormat","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"string","name":"_tokenURI","type":"string"}],"name":"setTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_callbackGasLimit","type":"uint32"},{"internalType":"uint64","name":"_subscriptionId","type":"uint64"},{"internalType":"bytes32","name":"_keyHash","type":"bytes32"},{"internalType":"uint16","name":"_requestConfirmations","type":"uint16"}],"name":"updateChainlink","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"uint256","name":"_attributeIndex","type":"uint256"},{"internalType":"uint256","name":"_valueToAdd","type":"uint256"},{"internalType":"uint256","name":"_newDesignId","type":"uint256"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"upgradeBedroomNft","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}]}