/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IDexInterface extends ethers.utils.Interface {
  functions: {
    "buyNft(uint8,uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "setBuyingPrices(uint8,uint256)": FunctionFragment;
    "setContracts(address,address,address)": FunctionFragment;
    "setTeamWallet(address)": FunctionFragment;
    "setUpgradePrices(uint8,uint256,uint256,uint256,uint256)": FunctionFragment;
    "upgradeNft(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdrawMoney()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyNft",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyingPrices",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContracts",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradePrices",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeNft",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMoney",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBuyingPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMoney",
    data: BytesLike
  ): Result;

  events: {
    "BuyNft(address,uint8,uint256)": EventFragment;
    "ReceivedMoney(address,uint256)": EventFragment;
    "UpgradeNft(address,uint8,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawMoney(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedMoney"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradeNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawMoney"): EventFragment;
}

export type BuyNftEvent = TypedEvent<
  [string, number, BigNumber] & {
    owner: string;
    category: number;
    designId: BigNumber;
  }
>;

export type ReceivedMoneyEvent = TypedEvent<
  [string, BigNumber] & { sender: string; price: BigNumber }
>;

export type UpgradeNftEvent = TypedEvent<
  [string, number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    owner: string;
    category: number;
    tokenId: BigNumber;
    newDesignId: BigNumber;
    upgradeDesignId: BigNumber;
    upgradeIndex: BigNumber;
    price: BigNumber;
  }
>;

export type WithdrawMoneyEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; price: BigNumber }
>;

export class IDex extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDexInterface;

  functions: {
    buyNft(
      _category: BigNumberish,
      _designId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBuyingPrices(
      _category: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContracts(
      _sleepToken: string,
      _bedroomNft: string,
      _upgradeNft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTeamWallet(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpgradePrices(
      _category: BigNumberish,
      _upgradeIndex: BigNumberish,
      _indexAttribute: BigNumberish,
      _valueToAddMax: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeNft(
      _tokenId: BigNumberish,
      _newDesignId: BigNumberish,
      _upgradeDesignId: BigNumberish,
      _upgradeIndex: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawMoney(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyNft(
    _category: BigNumberish,
    _designId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  setBuyingPrices(
    _category: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContracts(
    _sleepToken: string,
    _bedroomNft: string,
    _upgradeNft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTeamWallet(
    _newAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpgradePrices(
    _category: BigNumberish,
    _upgradeIndex: BigNumberish,
    _indexAttribute: BigNumberish,
    _valueToAddMax: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeNft(
    _tokenId: BigNumberish,
    _newDesignId: BigNumberish,
    _upgradeDesignId: BigNumberish,
    _upgradeIndex: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawMoney(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyNft(
      _category: BigNumberish,
      _designId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyingPrices(
      _category: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setContracts(
      _sleepToken: string,
      _bedroomNft: string,
      _upgradeNft: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamWallet(
      _newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpgradePrices(
      _category: BigNumberish,
      _upgradeIndex: BigNumberish,
      _indexAttribute: BigNumberish,
      _valueToAddMax: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeNft(
      _tokenId: BigNumberish,
      _newDesignId: BigNumberish,
      _upgradeDesignId: BigNumberish,
      _upgradeIndex: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMoney(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BuyNft(address,uint8,uint256)"(
      owner?: string | null,
      category?: null,
      designId?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { owner: string; category: number; designId: BigNumber }
    >;

    BuyNft(
      owner?: string | null,
      category?: null,
      designId?: null
    ): TypedEventFilter<
      [string, number, BigNumber],
      { owner: string; category: number; designId: BigNumber }
    >;

    "ReceivedMoney(address,uint256)"(
      sender?: string | null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; price: BigNumber }
    >;

    ReceivedMoney(
      sender?: string | null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { sender: string; price: BigNumber }
    >;

    "UpgradeNft(address,uint8,uint256,uint256,uint256,uint256,uint256)"(
      owner?: string | null,
      category?: null,
      tokenId?: null,
      newDesignId?: null,
      upgradeDesignId?: null,
      upgradeIndex?: null,
      price?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        category: number;
        tokenId: BigNumber;
        newDesignId: BigNumber;
        upgradeDesignId: BigNumber;
        upgradeIndex: BigNumber;
        price: BigNumber;
      }
    >;

    UpgradeNft(
      owner?: string | null,
      category?: null,
      tokenId?: null,
      newDesignId?: null,
      upgradeDesignId?: null,
      upgradeIndex?: null,
      price?: null
    ): TypedEventFilter<
      [string, number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        owner: string;
        category: number;
        tokenId: BigNumber;
        newDesignId: BigNumber;
        upgradeDesignId: BigNumber;
        upgradeIndex: BigNumber;
        price: BigNumber;
      }
    >;

    "WithdrawMoney(address,uint256)"(
      receiver?: string | null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; price: BigNumber }
    >;

    WithdrawMoney(
      receiver?: string | null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; price: BigNumber }
    >;
  };

  estimateGas: {
    buyNft(
      _category: BigNumberish,
      _designId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyingPrices(
      _category: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContracts(
      _sleepToken: string,
      _bedroomNft: string,
      _upgradeNft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTeamWallet(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpgradePrices(
      _category: BigNumberish,
      _upgradeIndex: BigNumberish,
      _indexAttribute: BigNumberish,
      _valueToAddMax: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeNft(
      _tokenId: BigNumberish,
      _newDesignId: BigNumberish,
      _upgradeDesignId: BigNumberish,
      _upgradeIndex: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawMoney(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyNft(
      _category: BigNumberish,
      _designId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBuyingPrices(
      _category: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContracts(
      _sleepToken: string,
      _bedroomNft: string,
      _upgradeNft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTeamWallet(
      _newAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpgradePrices(
      _category: BigNumberish,
      _upgradeIndex: BigNumberish,
      _indexAttribute: BigNumberish,
      _valueToAddMax: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeNft(
      _tokenId: BigNumberish,
      _newDesignId: BigNumberish,
      _upgradeDesignId: BigNumberish,
      _upgradeIndex: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMoney(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
