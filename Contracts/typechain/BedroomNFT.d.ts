/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BedroomNFTInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "fileFormat()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintingBedroomNft(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setFileFormat(string)": FunctionFragment;
    "setThresholds(uint256,uint256,uint256)": FunctionFragment;
    "setTokenURI(uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "thresholds(uint256)": FunctionFragment;
    "tokenId()": FunctionFragment;
    "tokenIdToBed(uint256)": FunctionFragment;
    "tokenIdToBedroom(uint256)": FunctionFragment;
    "tokenIdToInfos(uint256)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeBedroomNft(uint256,uint256,bool)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fileFormat",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintingBedroomNft",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFileFormat",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setThresholds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "thresholds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdToBed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToBedroom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdToInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeBedroomNft",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fileFormat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintingBedroomNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFileFormat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "thresholds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToBed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToBedroom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdToInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeBedroomNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "MintingBedroomNFT(uint256,string,tuple,tuple,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
    "UpgradingBedroomNFT(uint256,string,tuple,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingBedroomNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpgradingBedroomNFT"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    account: string;
    operator: string;
    approved: boolean;
  }
>;

export type MintingBedroomNFTEvent = TypedEvent<
  [
    BigNumber,
    string,
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      nbUpgrades: BigNumber;
      lightIsolationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      soundIsolationScore: BigNumber;
      temperatureScore: BigNumber;
      humidityScore: BigNumber;
      sleepAidMachinesScore: BigNumber;
    },
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nbUpgrades: BigNumber;
      sizeScore: BigNumber;
      heightScore: BigNumber;
      bedBaseScore: BigNumber;
      mattressTechnologyScore: BigNumber;
      mattressThicknessScore: BigNumber;
      mattressDeformationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      hygrometricRegulationScore: BigNumber;
      comforterComfortabilityScore: BigNumber;
      pillowComfortabilityScore: BigNumber;
    },
    string
  ] & {
    _tokenID: BigNumber;
    _tokenURI: string;
    _bedroom: [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      nbUpgrades: BigNumber;
      lightIsolationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      soundIsolationScore: BigNumber;
      temperatureScore: BigNumber;
      humidityScore: BigNumber;
      sleepAidMachinesScore: BigNumber;
    };
    _bed: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nbUpgrades: BigNumber;
      sizeScore: BigNumber;
      heightScore: BigNumber;
      bedBaseScore: BigNumber;
      mattressTechnologyScore: BigNumber;
      mattressThicknessScore: BigNumber;
      mattressDeformationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      hygrometricRegulationScore: BigNumber;
      comforterComfortabilityScore: BigNumber;
      pillowComfortabilityScore: BigNumber;
    };
    _owner: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type URIEvent = TypedEvent<
  [string, BigNumber] & { value: string; id: BigNumber }
>;

export type UpgradingBedroomNFTEvent = TypedEvent<
  [
    BigNumber,
    string,
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      nbUpgrades: BigNumber;
      lightIsolationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      soundIsolationScore: BigNumber;
      temperatureScore: BigNumber;
      humidityScore: BigNumber;
      sleepAidMachinesScore: BigNumber;
    },
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nbUpgrades: BigNumber;
      sizeScore: BigNumber;
      heightScore: BigNumber;
      bedBaseScore: BigNumber;
      mattressTechnologyScore: BigNumber;
      mattressThicknessScore: BigNumber;
      mattressDeformationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      hygrometricRegulationScore: BigNumber;
      comforterComfortabilityScore: BigNumber;
      pillowComfortabilityScore: BigNumber;
    },
    string
  ] & {
    _tokenID: BigNumber;
    _newTokenURI: string;
    _newBedroom: [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      nbUpgrades: BigNumber;
      lightIsolationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      soundIsolationScore: BigNumber;
      temperatureScore: BigNumber;
      humidityScore: BigNumber;
      sleepAidMachinesScore: BigNumber;
    };
    _newBed: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nbUpgrades: BigNumber;
      sizeScore: BigNumber;
      heightScore: BigNumber;
      bedBaseScore: BigNumber;
      mattressTechnologyScore: BigNumber;
      mattressThicknessScore: BigNumber;
      mattressDeformationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      hygrometricRegulationScore: BigNumber;
      comforterComfortabilityScore: BigNumber;
      pillowComfortabilityScore: BigNumber;
    };
    _owner: string;
  }
>;

export class BedroomNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BedroomNFTInterface;

  functions: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    fileFormat(overrides?: CallOverrides): Promise<[string]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintingBedroomNft(
      _designId: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFileFormat(
      _format: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setThresholds(
      _indexAttribute: BigNumberish,
      _initialScoreMax: BigNumberish,
      _upgradeIncreases: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenURI(
      _tokenId: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    thresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        initialScoreMax: BigNumber;
        upgradeIncreases: BigNumber;
        levelToUnlock: BigNumber;
      }
    >;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenIdToBed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nbUpgrades: BigNumber;
        sizeScore: BigNumber;
        heightScore: BigNumber;
        bedBaseScore: BigNumber;
        mattressTechnologyScore: BigNumber;
        mattressThicknessScore: BigNumber;
        mattressDeformationScore: BigNumber;
        thermalIsolationScore: BigNumber;
        hygrometricRegulationScore: BigNumber;
        comforterComfortabilityScore: BigNumber;
        pillowComfortabilityScore: BigNumber;
      }
    >;

    tokenIdToBedroom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        nbUpgrades: BigNumber;
        lightIsolationScore: BigNumber;
        thermalIsolationScore: BigNumber;
        soundIsolationScore: BigNumber;
        temperatureScore: BigNumber;
        humidityScore: BigNumber;
        sleepAidMachinesScore: BigNumber;
      }
    >;

    tokenIdToInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        price: BigNumber;
        designId: BigNumber;
      }
    >;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeBedroomNft(
      _tokenId: BigNumberish,
      _newDesignId: BigNumberish,
      _upgradeType: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  fileFormat(overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintingBedroomNft(
    _designId: BigNumberish,
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rawFulfillRandomWords(
    requestId: BigNumberish,
    randomWords: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFileFormat(
    _format: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setThresholds(
    _indexAttribute: BigNumberish,
    _initialScoreMax: BigNumberish,
    _upgradeIncreases: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenURI(
    _tokenId: BigNumberish,
    _tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  thresholds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      initialScoreMax: BigNumber;
      upgradeIncreases: BigNumber;
      levelToUnlock: BigNumber;
    }
  >;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  tokenIdToBed(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      nbUpgrades: BigNumber;
      sizeScore: BigNumber;
      heightScore: BigNumber;
      bedBaseScore: BigNumber;
      mattressTechnologyScore: BigNumber;
      mattressThicknessScore: BigNumber;
      mattressDeformationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      hygrometricRegulationScore: BigNumber;
      comforterComfortabilityScore: BigNumber;
      pillowComfortabilityScore: BigNumber;
    }
  >;

  tokenIdToBedroom(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      name: string;
      nbUpgrades: BigNumber;
      lightIsolationScore: BigNumber;
      thermalIsolationScore: BigNumber;
      soundIsolationScore: BigNumber;
      temperatureScore: BigNumber;
      humidityScore: BigNumber;
      sleepAidMachinesScore: BigNumber;
    }
  >;

  tokenIdToInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      price: BigNumber;
      designId: BigNumber;
    }
  >;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeBedroomNft(
    _tokenId: BigNumberish,
    _newDesignId: BigNumberish,
    _upgradeType: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    fileFormat(overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintingBedroomNft(
      _designId: BigNumberish,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_baseURI: string, overrides?: CallOverrides): Promise<void>;

    setFileFormat(_format: string, overrides?: CallOverrides): Promise<void>;

    setThresholds(
      _indexAttribute: BigNumberish,
      _initialScoreMax: BigNumberish,
      _upgradeIncreases: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenURI(
      _tokenId: BigNumberish,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    thresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        initialScoreMax: BigNumber;
        upgradeIncreases: BigNumber;
        levelToUnlock: BigNumber;
      }
    >;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdToBed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        nbUpgrades: BigNumber;
        sizeScore: BigNumber;
        heightScore: BigNumber;
        bedBaseScore: BigNumber;
        mattressTechnologyScore: BigNumber;
        mattressThicknessScore: BigNumber;
        mattressDeformationScore: BigNumber;
        thermalIsolationScore: BigNumber;
        hygrometricRegulationScore: BigNumber;
        comforterComfortabilityScore: BigNumber;
        pillowComfortabilityScore: BigNumber;
      }
    >;

    tokenIdToBedroom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        name: string;
        nbUpgrades: BigNumber;
        lightIsolationScore: BigNumber;
        thermalIsolationScore: BigNumber;
        soundIsolationScore: BigNumber;
        temperatureScore: BigNumber;
        humidityScore: BigNumber;
        sleepAidMachinesScore: BigNumber;
      }
    >;

    tokenIdToInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        price: BigNumber;
        designId: BigNumber;
      }
    >;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeBedroomNft(
      _tokenId: BigNumberish,
      _newDesignId: BigNumberish,
      _upgradeType: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    "MintingBedroomNFT(uint256,string,tuple,tuple,address)"(
      _tokenID?: null,
      _tokenURI?: null,
      _bedroom?: null,
      _bed?: null,
      _owner?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          nbUpgrades: BigNumber;
          lightIsolationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          soundIsolationScore: BigNumber;
          temperatureScore: BigNumber;
          humidityScore: BigNumber;
          sleepAidMachinesScore: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nbUpgrades: BigNumber;
          sizeScore: BigNumber;
          heightScore: BigNumber;
          bedBaseScore: BigNumber;
          mattressTechnologyScore: BigNumber;
          mattressThicknessScore: BigNumber;
          mattressDeformationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          hygrometricRegulationScore: BigNumber;
          comforterComfortabilityScore: BigNumber;
          pillowComfortabilityScore: BigNumber;
        },
        string
      ],
      {
        _tokenID: BigNumber;
        _tokenURI: string;
        _bedroom: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          nbUpgrades: BigNumber;
          lightIsolationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          soundIsolationScore: BigNumber;
          temperatureScore: BigNumber;
          humidityScore: BigNumber;
          sleepAidMachinesScore: BigNumber;
        };
        _bed: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nbUpgrades: BigNumber;
          sizeScore: BigNumber;
          heightScore: BigNumber;
          bedBaseScore: BigNumber;
          mattressTechnologyScore: BigNumber;
          mattressThicknessScore: BigNumber;
          mattressDeformationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          hygrometricRegulationScore: BigNumber;
          comforterComfortabilityScore: BigNumber;
          pillowComfortabilityScore: BigNumber;
        };
        _owner: string;
      }
    >;

    MintingBedroomNFT(
      _tokenID?: null,
      _tokenURI?: null,
      _bedroom?: null,
      _bed?: null,
      _owner?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          nbUpgrades: BigNumber;
          lightIsolationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          soundIsolationScore: BigNumber;
          temperatureScore: BigNumber;
          humidityScore: BigNumber;
          sleepAidMachinesScore: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nbUpgrades: BigNumber;
          sizeScore: BigNumber;
          heightScore: BigNumber;
          bedBaseScore: BigNumber;
          mattressTechnologyScore: BigNumber;
          mattressThicknessScore: BigNumber;
          mattressDeformationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          hygrometricRegulationScore: BigNumber;
          comforterComfortabilityScore: BigNumber;
          pillowComfortabilityScore: BigNumber;
        },
        string
      ],
      {
        _tokenID: BigNumber;
        _tokenURI: string;
        _bedroom: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          nbUpgrades: BigNumber;
          lightIsolationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          soundIsolationScore: BigNumber;
          temperatureScore: BigNumber;
          humidityScore: BigNumber;
          sleepAidMachinesScore: BigNumber;
        };
        _bed: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nbUpgrades: BigNumber;
          sizeScore: BigNumber;
          heightScore: BigNumber;
          bedBaseScore: BigNumber;
          mattressTechnologyScore: BigNumber;
          mattressThicknessScore: BigNumber;
          mattressDeformationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          hygrometricRegulationScore: BigNumber;
          comforterComfortabilityScore: BigNumber;
          pillowComfortabilityScore: BigNumber;
        };
        _owner: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    URI(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    "UpgradingBedroomNFT(uint256,string,tuple,tuple,address)"(
      _tokenID?: null,
      _newTokenURI?: null,
      _newBedroom?: null,
      _newBed?: null,
      _owner?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          nbUpgrades: BigNumber;
          lightIsolationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          soundIsolationScore: BigNumber;
          temperatureScore: BigNumber;
          humidityScore: BigNumber;
          sleepAidMachinesScore: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nbUpgrades: BigNumber;
          sizeScore: BigNumber;
          heightScore: BigNumber;
          bedBaseScore: BigNumber;
          mattressTechnologyScore: BigNumber;
          mattressThicknessScore: BigNumber;
          mattressDeformationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          hygrometricRegulationScore: BigNumber;
          comforterComfortabilityScore: BigNumber;
          pillowComfortabilityScore: BigNumber;
        },
        string
      ],
      {
        _tokenID: BigNumber;
        _newTokenURI: string;
        _newBedroom: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          nbUpgrades: BigNumber;
          lightIsolationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          soundIsolationScore: BigNumber;
          temperatureScore: BigNumber;
          humidityScore: BigNumber;
          sleepAidMachinesScore: BigNumber;
        };
        _newBed: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nbUpgrades: BigNumber;
          sizeScore: BigNumber;
          heightScore: BigNumber;
          bedBaseScore: BigNumber;
          mattressTechnologyScore: BigNumber;
          mattressThicknessScore: BigNumber;
          mattressDeformationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          hygrometricRegulationScore: BigNumber;
          comforterComfortabilityScore: BigNumber;
          pillowComfortabilityScore: BigNumber;
        };
        _owner: string;
      }
    >;

    UpgradingBedroomNFT(
      _tokenID?: null,
      _newTokenURI?: null,
      _newBedroom?: null,
      _newBed?: null,
      _owner?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          nbUpgrades: BigNumber;
          lightIsolationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          soundIsolationScore: BigNumber;
          temperatureScore: BigNumber;
          humidityScore: BigNumber;
          sleepAidMachinesScore: BigNumber;
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nbUpgrades: BigNumber;
          sizeScore: BigNumber;
          heightScore: BigNumber;
          bedBaseScore: BigNumber;
          mattressTechnologyScore: BigNumber;
          mattressThicknessScore: BigNumber;
          mattressDeformationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          hygrometricRegulationScore: BigNumber;
          comforterComfortabilityScore: BigNumber;
          pillowComfortabilityScore: BigNumber;
        },
        string
      ],
      {
        _tokenID: BigNumber;
        _newTokenURI: string;
        _newBedroom: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          name: string;
          nbUpgrades: BigNumber;
          lightIsolationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          soundIsolationScore: BigNumber;
          temperatureScore: BigNumber;
          humidityScore: BigNumber;
          sleepAidMachinesScore: BigNumber;
        };
        _newBed: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          nbUpgrades: BigNumber;
          sizeScore: BigNumber;
          heightScore: BigNumber;
          bedBaseScore: BigNumber;
          mattressTechnologyScore: BigNumber;
          mattressThicknessScore: BigNumber;
          mattressDeformationScore: BigNumber;
          thermalIsolationScore: BigNumber;
          hygrometricRegulationScore: BigNumber;
          comforterComfortabilityScore: BigNumber;
          pillowComfortabilityScore: BigNumber;
        };
        _owner: string;
      }
    >;
  };

  estimateGas: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fileFormat(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintingBedroomNft(
      _designId: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFileFormat(
      _format: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setThresholds(
      _indexAttribute: BigNumberish,
      _initialScoreMax: BigNumberish,
      _upgradeIncreases: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenURI(
      _tokenId: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    thresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIdToBed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToBedroom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIdToInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeBedroomNft(
      _tokenId: BigNumberish,
      _newDesignId: BigNumberish,
      _upgradeType: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fileFormat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintingBedroomNft(
      _designId: BigNumberish,
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: BigNumberish,
      randomWords: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFileFormat(
      _format: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setThresholds(
      _indexAttribute: BigNumberish,
      _initialScoreMax: BigNumberish,
      _upgradeIncreases: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenURI(
      _tokenId: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    thresholds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIdToBed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToBedroom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIdToInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeBedroomNft(
      _tokenId: BigNumberish,
      _newDesignId: BigNumberish,
      _upgradeType: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
