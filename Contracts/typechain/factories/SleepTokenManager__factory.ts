/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SleepTokenManager,
  SleepTokenManagerInterface,
} from "../SleepTokenManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sleepToken",
    outputs: [
      {
        internalType: "contract SleepToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6105928061010d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806307ed500314610051578063715018a61461006f5780638da5cb5b14610079578063f2fde38b14610097575b600080fd5b6100596100b3565b604051610066919061040b565b60405180910390f35b6100776100d9565b005b610081610161565b60405161008e91906103f0565b60405180910390f35b6100b160048036038101906100ac9190610363565b61018a565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6100e1610282565b73ffffffffffffffffffffffffffffffffffffffff166100ff610161565b73ffffffffffffffffffffffffffffffffffffffff1614610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c90610446565b60405180910390fd5b61015f600061028a565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610192610282565b73ffffffffffffffffffffffffffffffffffffffff166101b0610161565b73ffffffffffffffffffffffffffffffffffffffff1614610206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fd90610446565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026d90610426565b60405180910390fd5b61027f8161028a565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061035d81610545565b92915050565b60006020828403121561037557600080fd5b60006103838482850161034e565b91505092915050565b61039581610477565b82525050565b6103a4816104a9565b82525050565b60006103b7602683610466565b91506103c2826104cd565b604082019050919050565b60006103da602083610466565b91506103e58261051c565b602082019050919050565b6000602082019050610405600083018461038c565b92915050565b6000602082019050610420600083018461039b565b92915050565b6000602082019050818103600083015261043f816103aa565b9050919050565b6000602082019050818103600083015261045f816103cd565b9050919050565b600082825260208201905092915050565b600061048282610489565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104b4826104bb565b9050919050565b60006104c682610489565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61054e81610477565b811461055957600080fd5b5056fea264697066735822122068ec40081550bdfddeb1f05c72b25d66afb27d6c3a53158c9301d5ca4467e7bb64736f6c63430008040033";

export class SleepTokenManager__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SleepTokenManager> {
    return super.deploy(overrides || {}) as Promise<SleepTokenManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SleepTokenManager {
    return super.attach(address) as SleepTokenManager;
  }
  connect(signer: Signer): SleepTokenManager__factory {
    return super.connect(signer) as SleepTokenManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SleepTokenManagerInterface {
    return new utils.Interface(_abi) as SleepTokenManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SleepTokenManager {
    return new Contract(address, _abi, signerOrProvider) as SleepTokenManager;
  }
}
